#!/usr/bin/env bash
#
# Finds the most recently released (which is NOT always the same as 'the latest') Maven module versions at Maven Central
# and compares them to those listed below.
#
# WARNING: 'sort=v+desc' doesn't work, timestamp seems to always be used for sorting, see e.g. this Github issue:
# https://github.com/sonatype-nexus-community/search-maven-org/issues/149. For example, if 1.x and 2.x branches coexist,
# 1.x releases taking place after 2.x releases are returned first. Such modules must be checked manually in order to
# find out their REAL latest versions.
#
set -e

SEARCH_URL="https://search.maven.org/solrsearch/select?core=gav&rows=1&wt=json&sort=v+desc&q="

declare -a CURRENT_MODULE_VERSIONS=(
    org.springframework.boot:spring-boot-starter-parent:3.5.6

    org.apache.maven.plugins:maven-checkstyle-plugin:3.6.0
    org.apache.maven.plugins:maven-surefire-plugin:3.5.4
    org.apache.maven.plugins:maven-gpg-plugin:3.2.8
    org.apache.maven.plugins:maven-javadoc-plugin:3.12.0
    org.apache.maven.plugins:maven-source-plugin:3.2.1

    com.github.ferstl:depgraph-maven-plugin:4.0.3
    com.mysema.maven:apt-maven-plugin:1.1.3
    org.jacoco:jacoco-maven-plugin:0.8.13
    org.qunix:structure-maven-plugin:0.0.2
    ch.acanda.maven:spring-banner-plugin:1.6.0

    pw.krejci:jmh-maven-plugin:0.2.2
    org.openjdk.jmh:jmh-core:1.37

    org.fugerit.java:freemarker-maven-plugin:1.2.0
    org.freemarker:freemarker:2.3.34

    org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:7.23.0
    org.camunda.community.rest:camunda-platform-7-rest-client-spring-boot-openapi:7.23.3

    io.cucumber:cucumber-bom:7.22.1
    io.github.resilience4j:resilience4j-bom:2.3.0
    org.junit:junit-bom:5.12.2
    org.assertj:assertj-bom:3.27.3

    org.projectlombok:lombok:1.18.38
    org.mapstruct:mapstruct-processor:1.6.3
    org.testcontainers:testcontainers:1.21.3
    am.ik.yavi:yavi:0.16.0

    org.springframework.cloud:spring-cloud-contract-wiremock:4.3.0
    org.springframework.cloud:spring-cloud-dependencies:2025.0.0
    io.awspring.cloud:spring-cloud-aws-dependencies:3.4.0
    software.amazon.awssdk:bom:2.34.0

    org.springframework.statemachine:spring-statemachine-autoconfigure:4.0.0
    org.togglz:togglz-spring-boot-starter:4.4.0
    org.apache.groovy:groovy-jsr223:5.0.1
    com.bucket4j:bucket4j_jdk17-core:8.14.0
    org.redisson:redisson-spring-boot-starter:3.50.0
    io.mongock:mongock-community-bom:5.5.1
    io.freefair.okhttp-spring-boot:okhttp5-spring-boot-starter:3.5.3
    com.gruelbox:transactionoutbox-spring:6.0.585
    org.apache.activemq:activemq-client:6.1.7

    commons-beanutils:commons-beanutils:1.11.0
    commons-codec:commons-codec:1.19.0
    commons-validator:commons-validator:1.10.0
    commons-io:commons-io:2.20.0
    org.apache.commons:commons-lang3:3.19.0
    org.apache.commons:commons-collections4:4.5.0
    org.apache.commons:commons-text:1.14.0
    org.apache.opennlp:opennlp-tools:2.5.5

    org.bouncycastle:bcprov-jdk18on:1.82
    org.bouncycastle:bcpkix-jdk18on:1.82

    com.google.guava:guava:33.4.8-jre
    io.hypersistence:hypersistence-utils-hibernate-62:3.9.4
    org.hibernate.orm:hibernate-spatial:6.6.18.Final
    org.hashids:hashids:1.0.3
    de.codecentric:spring-boot-admin-starter-server:3.4.1
    org.springframework.security:spring-security-oauth2-client:6.4.7
    com.nimbusds:nimbus-jose-jwt:10.3

    org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.6
    org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6
    io.swagger.core.v3:swagger-annotations:2.2.31

    org.xerial.snappy:snappy-java:1.1.10.7
    ru.odnoklassniki:one-nio:2.1.0
    net.logstash.logback:logstash-logback-encoder:8.1
    net.bytebuddy:byte-buddy:1.17.5
    org.objenesis:objenesis:3.4
    com.github.luben:zstd-jni:1.5.7-3

    net.openhft:zero-allocation-hashing:0.27ea0
    com.github.f4b6a3:uuid-creator:6.1.1
    com.github.bastiaanjansen:otp-java:2.1.0
    io.github.mysto:ff3:1.2.0

    com.google.zxing:javase:3.5.3
    com.github.auties00:qr-terminal:2.2
    com.maxmind.geoip2:geoip2:4.3.0
    com.googlecode.libphonenumber:libphonenumber:9.0.8
)

declare -i i=0
declare -i HAS_INCONSISTENCY=0
declare -a REPORT

echo "Checking latest module versions:"

for module in "${CURRENT_MODULE_VERSIONS[@]}"; do
    # parse 'groupId:artifactId:currentVersion'
    if ! [[ "$module" =~ ^([^:]+):([^:]+):(.+)$ ]]; then
        echo "Invalid entry: '$module'"
        exit 1
    fi

    GROUP_ID=${BASH_REMATCH[1]}
    ARTIFACT_ID=${BASH_REMATCH[2]}
    OLD_VERSION=${BASH_REMATCH[3]}

    printf "[%2d/%d] %s:%s\n" "$((i + 1))" "${#CURRENT_MODULE_VERSIONS[@]}" "${GROUP_ID}" "${ARTIFACT_ID}"
    SEARCH_QUERY="g:${GROUP_ID}+AND+a:${ARTIFACT_ID}"
    # extract version from 'groupId:artifactId:version'
    NEW_VERSION=$(curl -SsL "$SEARCH_URL$SEARCH_QUERY" | jq -r '.response.docs[0].v')

    if [ -z "$NEW_VERSION" ]; then
        REPORT+=("")
        REPORT+=("* $module")
        REPORT+=("    [ERROR] Version not found, invalid API request?")
    elif [ "$NEW_VERSION" != "$OLD_VERSION" ]; then
        REPORT+=("")
        REPORT+=("* $module")
        REPORT+=("    [INFO ] Latest version released: $NEW_VERSION")

        # parse '1.2.3whatever'
        if [[ "$OLD_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            OLD_VERSION_MAJOR=${BASH_REMATCH[1]}
            OLD_VERSION_MINOR=${BASH_REMATCH[2]}
            OLD_VERSION_PATCH=${BASH_REMATCH[3]}
        # parse '1.2whatever' (no patch segment)
        elif [[ "$OLD_VERSION" =~ ^([0-9]+)\.([0-9]+) ]]; then
            OLD_VERSION_MAJOR=${BASH_REMATCH[1]}
            OLD_VERSION_MINOR=${BASH_REMATCH[2]}
            OLD_VERSION_PATCH=0
        # parse '1whatever' (no minor version)
        elif [[ "$OLD_VERSION" =~ ^([0-9]+) ]]; then
            OLD_VERSION_MAJOR=${BASH_REMATCH[1]}
            OLD_VERSION_MINOR=0
            OLD_VERSION_PATCH=0
        else
            OLD_VERSION_MAJOR=0
            OLD_VERSION_MINOR=0
            OLD_VERSION_PATCH=0
        fi
        
        # parse '1.2.3whatever'
        if [[ "$NEW_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            NEW_VERSION_MAJOR=${BASH_REMATCH[1]}
            NEW_VERSION_MINOR=${BASH_REMATCH[2]}
            NEW_VERSION_PATCH=${BASH_REMATCH[3]}
        # parse '1.2whatever' (no patch segment)
        elif [[ "$NEW_VERSION" =~ ^([0-9]+)\.([0-9]+) ]]; then
            NEW_VERSION_MAJOR=${BASH_REMATCH[1]}
            NEW_VERSION_MINOR=${BASH_REMATCH[2]}
            NEW_VERSION_PATCH=0
        # parse '1whatever' (no minor version)
        elif [[ "$NEW_VERSION" =~ ^([0-9]+) ]]; then
            NEW_VERSION_MAJOR=${BASH_REMATCH[1]}
            NEW_VERSION_MINOR=0
            NEW_VERSION_PATCH=0
        else
            NEW_VERSION_MAJOR=0
            NEW_VERSION_MINOR=0
            NEW_VERSION_PATCH=0
        fi

        HAS_INCONSISTENCY=0

        # in new (a.b.c) vs. old (d.e.f), a must be greater than or equal to d
        if [ "$NEW_VERSION_MAJOR" -lt "$OLD_VERSION_MAJOR" ]; then
            HAS_INCONSISTENCY=1
            REPORT+=("    [WARN ] Search API inconsistency: latest major version ($NEW_VERSION_MAJOR) is smaller than yours ($OLD_VERSION_MAJOR). Please check the latest version at Maven Central manually.")
        # if major versions are equal, sanitize minor patch versions
        elif [ "$NEW_VERSION_MAJOR" == "$OLD_VERSION_MAJOR" ]; then
            # in new (a.b.c) vs. old (d.e.f), b must be greater than or equal to e
            if [ "$NEW_VERSION_MINOR" -lt "$OLD_VERSION_MINOR" ]; then
                HAS_INCONSISTENCY=1
                REPORT+=("    [WARN ] Search API inconsistency: latest minor version ($NEW_VERSION_MINOR) is smaller than yours ($OLD_VERSION_MINOR). Please check the latest version at Maven Central manually.")
            # if major and minor versions are equal, sanitize patch versions
            elif [ "$NEW_VERSION_MINOR" == "$OLD_VERSION_MINOR" ]; then
                # in new (a.b.c) vs. old (d.e.f), c must be greater than or equal to f
                if [ "$NEW_VERSION_PATCH" -lt "$OLD_VERSION_PATCH" ]; then
                    HAS_INCONSISTENCY=1
                    REPORT+=("    [WARN ] Search API inconsistency: latest patch version ($NEW_VERSION_PATCH) is smaller than yours ($OLD_VERSION_PATCH). Please check the latest version at Maven Central manually.")
                fi
            fi
        fi

        # debug version parsing
        if [ "$HAS_INCONSISTENCY" -ne 0 ]; then
            REPORT+=("    [DEBUG] Latest version parsed: $NEW_VERSION -> major=$NEW_VERSION_MAJOR, minor=$NEW_VERSION_MINOR, patch=$NEW_VERSION_PATCH")
            REPORT+=("    [DEBUG] Your version parsed: $OLD_VERSION -> major=$OLD_VERSION_MAJOR, minor=$OLD_VERSION_MINOR, patch=$OLD_VERSION_PATCH")
        fi
    fi

    i=$((i + 1))
done

echo
echo "Modules having newer versions:"
IFS=$'\n'
echo "${REPORT[*]}"
