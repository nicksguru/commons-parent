#!/usr/bin/env bash
#
# Finds the most recently released (which is NOT always the same as 'the latest') Maven module versions at Maven Central
# and compares them to those listed below.
#
set -e

DIR=$(dirname "$0")
. "$DIR/modules.bash"

declare -i i=0
declare -i HAS_INCONSISTENCY=0
declare -a REPORT

echo "Checking latest module versions..."
#echo "$DATA"

for module in "${CURRENT_MODULE_VERSIONS[@]}"; do
    # parse 'groupId:artifactId:currentVersion'
    if ! [[ "$module" =~ ^([^:]+):([^:]+):(.+)$ ]]; then
        echo "Invalid entry: '$module'"
        exit 1
    fi

    GROUP_ID=${BASH_REMATCH[1]}
    ARTIFACT_ID=${BASH_REMATCH[2]}
    OLD_VERSION=${BASH_REMATCH[3]}

    printf "[%2d/%d] %s:%s\n" "$((i + 1))" "${#CURRENT_MODULE_VERSIONS[@]}" "${GROUP_ID}" "${ARTIFACT_ID}"
    # Maven Central Search (JSON) API is unstable as to reporting the latest version, unlike this file
    NEW_VERSION=$(curl -sSL "https://repo.maven.apache.org/maven2/${GROUP_ID//.//}/$ARTIFACT_ID/maven-metadata.xml" \
        | grep --only-matching -E '<version>.+?</version>' \
        | tail -n 1 \
        | sed -Ee's#<version>(.+?)</version>#\1#')
    #echo "$NEW_VERSION"
    
    if [ -z "$NEW_VERSION" ]; then
        REPORT+=("")
        REPORT+=("* $module")
        REPORT+=("    [ERROR] Version not found, invalid API request?")
    elif [ "$NEW_VERSION" != "$OLD_VERSION" ]; then
        REPORT+=("")
        REPORT+=("* $module")
        REPORT+=("    [INFO ] Latest version released: $NEW_VERSION")

        # parse '1.2.3whatever'
        if [[ "$OLD_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            OLD_VERSION_MAJOR=${BASH_REMATCH[1]}
            OLD_VERSION_MINOR=${BASH_REMATCH[2]}
            OLD_VERSION_PATCH=${BASH_REMATCH[3]}
        # parse '1.2whatever' (no patch segment)
        elif [[ "$OLD_VERSION" =~ ^([0-9]+)\.([0-9]+) ]]; then
            OLD_VERSION_MAJOR=${BASH_REMATCH[1]}
            OLD_VERSION_MINOR=${BASH_REMATCH[2]}
            OLD_VERSION_PATCH=0
        # parse '1whatever' (no minor version)
        elif [[ "$OLD_VERSION" =~ ^([0-9]+) ]]; then
            OLD_VERSION_MAJOR=${BASH_REMATCH[1]}
            OLD_VERSION_MINOR=0
            OLD_VERSION_PATCH=0
        else
            OLD_VERSION_MAJOR=0
            OLD_VERSION_MINOR=0
            OLD_VERSION_PATCH=0
        fi
        
        # parse '1.2.3whatever'
        if [[ "$NEW_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            NEW_VERSION_MAJOR=${BASH_REMATCH[1]}
            NEW_VERSION_MINOR=${BASH_REMATCH[2]}
            NEW_VERSION_PATCH=${BASH_REMATCH[3]}
        # parse '1.2whatever' (no patch segment)
        elif [[ "$NEW_VERSION" =~ ^([0-9]+)\.([0-9]+) ]]; then
            NEW_VERSION_MAJOR=${BASH_REMATCH[1]}
            NEW_VERSION_MINOR=${BASH_REMATCH[2]}
            NEW_VERSION_PATCH=0
        # parse '1whatever' (no minor version)
        elif [[ "$NEW_VERSION" =~ ^([0-9]+) ]]; then
            NEW_VERSION_MAJOR=${BASH_REMATCH[1]}
            NEW_VERSION_MINOR=0
            NEW_VERSION_PATCH=0
        else
            NEW_VERSION_MAJOR=0
            NEW_VERSION_MINOR=0
            NEW_VERSION_PATCH=0
        fi

        HAS_INCONSISTENCY=0

        # in new (a.b.c) vs. old (d.e.f), a must be greater than or equal to d
        if [ "$NEW_VERSION_MAJOR" -lt "$OLD_VERSION_MAJOR" ]; then
            HAS_INCONSISTENCY=1
            REPORT+=("    [WARN ] Search API inconsistency: latest major version ($NEW_VERSION_MAJOR) is smaller than yours ($OLD_VERSION_MAJOR). Please check the latest version at Maven Central manually.")
        # if major versions are equal, sanitize minor patch versions
        elif [ "$NEW_VERSION_MAJOR" == "$OLD_VERSION_MAJOR" ]; then
            # in new (a.b.c) vs. old (d.e.f), b must be greater than or equal to e
            if [ "$NEW_VERSION_MINOR" -lt "$OLD_VERSION_MINOR" ]; then
                HAS_INCONSISTENCY=1
                REPORT+=("    [WARN ] Search API inconsistency: latest minor version ($NEW_VERSION_MINOR) is smaller than yours ($OLD_VERSION_MINOR). Please check the latest version at Maven Central manually.")
            # if major and minor versions are equal, sanitize patch versions
            elif [ "$NEW_VERSION_MINOR" == "$OLD_VERSION_MINOR" ]; then
                # in new (a.b.c) vs. old (d.e.f), c must be greater than or equal to f
                if [ "$NEW_VERSION_PATCH" -lt "$OLD_VERSION_PATCH" ]; then
                    HAS_INCONSISTENCY=1
                    REPORT+=("    [WARN ] Search API inconsistency: latest patch version ($NEW_VERSION_PATCH) is smaller than yours ($OLD_VERSION_PATCH). Please check the latest version at Maven Central manually.")
                fi
            fi
        fi

        # debug version parsing
        if [ "$HAS_INCONSISTENCY" -ne 0 ]; then
            REPORT+=("    [DEBUG] Latest version parsed: $NEW_VERSION -> major=$NEW_VERSION_MAJOR, minor=$NEW_VERSION_MINOR, patch=$NEW_VERSION_PATCH")
            REPORT+=("    [DEBUG] Your version parsed: $OLD_VERSION -> major=$OLD_VERSION_MAJOR, minor=$OLD_VERSION_MINOR, patch=$OLD_VERSION_PATCH")
        fi
    fi

    i=$((i + 1))
done

echo
echo "Modules having newer versions:"
IFS=$'\n'
echo "${REPORT[*]}"
