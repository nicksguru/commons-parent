<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0">
    <parent>
        <groupId>guru.nicks.commons</groupId>
        <artifactId>bom</artifactId>
        <version>0.1.0-alpha.7</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <!-- groupId is redundant (inherited from parent), but required by Maven Central -->
    <groupId>${project.parent.groupId}</groupId>
    <artifactId>parent</artifactId>
    <version>${project.parent.version}</version>
    <packaging>pom</packaging>

    <name>Parent</name>
    <description>Build sequence for all Commons modules</description>
    <url>https://nicks.guru</url>

    <licenses>
        <license>
            <name>GNU Lesser General Public License, Version 3</name>
            <url>https://www.gnu.org/licenses/lgpl-3.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Nick S.</name>
            <email>job-offers@nicks.guru</email>
            <organizationUrl>https://nicks.guru</organizationUrl>
        </developer>
    </developers>

    <scm>
        <connection>https://nicks.guru</connection>
        <developerConnection>https://nicks.guru</developerConnection>
        <url>https://nicks.guru</url>
    </scm>

    <properties>
        <java.version>21</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- different for each submodule -->
        <generated.sources.directory>${project.build.directory}/generated-sources</generated.sources.directory>
        <generated.resources.directory>${project.build.directory}/generated-resources</generated.resources.directory>
    </properties>

    <dependencies>
        <!-- needed for 'mvn jmh:benchmark' to process modules having no JMH benchmarks (otherwise JMH plugin fails) -->
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
            <version>${jmh.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <!-- needed to copy auto-generated resources to target/ -->
            <resource>
                <directory>${generated.resources.directory}</directory>
            </resource>
        </resources>

        <plugins>
            <!-- run 'mvn jmh:benchmark' to run JMH benchmarks (they take a long time) -->
            <plugin>
                <groupId>pw.krejci</groupId>
                <artifactId>jmh-maven-plugin</artifactId>
                <!-- Parameters: https://github.com/metlos/jmh-maven-plugin?tab=readme-ov-file#passing-parameters -->
                <!-- Parameter values: https://github.com/Valloric/jmh-playground/blob/master/README.md#jmh-command-line-options -->
                <configuration>
                    <!-- default is 5, which is more reliable but slower -->
                    <fork>1</fork>
                    <threads>2</threads>
                    <!-- default is 600 sec. -->
                    <timeout>300</timeout>

                    <resultFormat>JSON</resultFormat>
                    <resultsFile>${project.build.directory}/jmh-report.json</resultsFile>

                    <!-- lower value increases scoreError significantly -->
                    <warmupIterations>5</warmupIterations>
                    <!-- 3 sec. per each warmup iteration -->
                    <warmup>3</warmup>

                    <!-- lower value increases scoreError significantly -->
                    <iterations>5</iterations>
                    <!-- 3 sec. per each benchmark iteration (benchmarks faster than this will be executed multiple
                         times and will have multiple records in the same report - see
                         https://github.com/google/benchmark/issues/952#issuecomment-609034381 for details) -->
                    <timeOnIteration>3</timeOnIteration>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <configuration>
                    <!-- code generated by 3rd party tools cannot be modified and is therefore accepted as-is -->
                    <excludeGeneratedSources>true</excludeGeneratedSources>

                    <!-- https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml
                         (modified after download, see original file in the same directory) -->
                    <configLocation>config/checkstyle.xml</configLocation>
                    <inputEncoding>UTF-8</inputEncoding>
                    <outputEncoding>UTF-8</outputEncoding>
                    <consoleOutput>true</consoleOutput>

                    <maxAllowedViolations>0</maxAllowedViolations>
                    <failOnViolation>true</failOnViolation>
                    <violationSeverity>error</violationSeverity>
                </configuration>

                <!-- to generate aggregated report, run 'mvn checkstyle:checkstyle-aggregate' and look at
                     target/reports/checkstyle-aggregate.html -->
                <executions>
                    <execution>
                        <id>checkstyle</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- QueryDSL: generate QJpaEntity for each JpaEntity and QMongoDocument for each MongoDocument -->
            <plugin>
                <groupId>com.mysema.maven</groupId>
                <artifactId>apt-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>process</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${generated.sources.directory}/java</outputDirectory>
                            <processors>
                                <processor>
                                    com.querydsl.apt.jpa.JPAAnnotationProcessor
                                </processor>
                                <processor>
                                    org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor
                                </processor>
                            </processors>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.querydsl</groupId>
                        <artifactId>querydsl-apt</artifactId>
                        <version>${querydsl.version}</version>
                        <classifier>jakarta</classifier>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- mvn compile -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <release>${java.version}</release>
                    <!-- this directive doesn't turn off warnings from -Xlint configured below -->
                    <showWarnings>false</showWarnings>
                    <compilerArgs>
                        <!-- Excluded 'serial' to not demand serialVersionUID in Serializable classes. This
                             interface is only used to mark classes as cacheable for OneNio serializer. -->
                        <arg>-Xlint:all,-serial</arg>
                        <!-- allow missing Javadoc -->
                        <arg>-Xdoclint:all,-missing</arg>

                        <arg>-Amapstruct.defaultInjectionStrategy=constructor</arg>
                        <!-- WARNING: stopped working in 1.6.3 (under Spring Boot 3.4.5), need to specify
                             componentModel explicitly in each mapper! -->
                        <arg>-Amapstruct.componentModel=spring</arg>
                    </compilerArgs>
                    <annotationProcessorPaths>
                        <!-- @ConstraintArguments -->
                        <path>
                            <groupId>am.ik.yavi</groupId>
                            <artifactId>yavi</artifactId>
                            <version>${yavi.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <!-- needed when using Lombok 1.18.16 and above -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>${lombok-mapstruct-binding.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.openjdk.jmh</groupId>
                            <artifactId>jmh-generator-annprocess</artifactId>
                            <version>${jmh.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!-- mvn test -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!-- disable console output from tests - only print their statuses -->
                    <consoleOutputReporter>
                        <disable>true</disable>
                    </consoleOutputReporter>

                    <!-- tree-style tests view, including Cucumber scenarios, thanks to the plugin attached below -->
                    <statelessTestsetInfoReporter
                            implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5StatelessTestsetInfoTreeReporter">
                    </statelessTestsetInfoReporter>

                    <!-- Include Cucumber feature names in each test result to disambiguate between different examples
                         and scenarios. Prints each example as a separate test, making it possible to see which one
                         failed. Without this setting, all examples are seen as a single test. -->
                    <properties>
                        <configurationParameters>
                            cucumber.junit-platform.naming-strategy=long
                        </configurationParameters>
                    </properties>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>me.fabriciorby</groupId>
                        <artifactId>maven-surefire-junit5-tree-reporter</artifactId>
                        <version>${maven-surefire-junit5-tree-reporter.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- wrap all tests in this Java agent in order to collect test coverage metrics -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/site/jacoco</outputDirectory>
                    <fileSets>
                        <fileSet>
                            <directory>${project.build.directory}</directory>
                            <includes>
                                <include>jacoco.exec</include>
                            </includes>
                        </fileSet>
                    </fileSets>
                </configuration>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- mvn clean deploy -Prelease -->
        <profile>
            <id>release</id>
            <build>
                <plugins>
                    <!-- generate xx-sources.jar -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- generate xx-javadoc.jar -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <configuration>
                            <doclint>none</doclint>
                            <failOnError>false</failOnError>
                            <verbose>false</verbose>
                        </configuration>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- sign artifacts -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <configuration>
                            <keyname>${gpg.keyname}</keyname>
                        </configuration>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.sonatype.central</groupId>
                        <artifactId>central-publishing-maven-plugin</artifactId>
                        <extensions>true</extensions>
                        <configuration>
                            <publishingServerId>central</publishingServerId>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
